-------------------------------------------------------------------------------------------------------------------------------------------------------
1. Создать функцию, которая по идентификатору пользователя ищет того, кто написал пользователю наибольшее количество сообщений. В результат нужно вывести идентификатор искомого пользователя.

DROP FUNCTION IF EXISTS get_user_id_whom_sent_more_messages_to_user;

CREATE FUNCTION get_user_id_whom_sent_more_messages_to_user(user_id INTEGER)
RETURNS INTEGER AS
$$
  SELECT from_user_id
    FROM messages
    WHERE to_user_id=user_id
    GROUP BY from_user_id
    ORDER BY COUNT(*) DESC
    LIMIT 1
$$
LANGUAGE sql;

SELECT get_user_id_whom_sent_more_messages_to_user(23);

-------------------------------------------------------------------------------------------------------------------------------------------------------
2. Создать процедуру, которая проверяет владельца фотографий, которые указаны в качестве основных фотографий пользователей в таблице профилей. Если пользователь в профилях не является владельцем своей основной фотографии, тогда для него нужно записать NULL в столбце main_photo_id.

CREATE OR REPLACE PROCEDURE main_photo_owner_check ()
LANGUAGE plpgsql AS
$$
  DECLARE owner RECORD;
  BEGIN
    FOR owner IN
    SELECT profiles.user_id
      FROM profiles
      JOIN photo
        ON profiles.main_photo_id=photo.id
      WHERE photo.owner_id != profiles.user_id
      LOOP
        UPDATE profiles
          SET main_photo_id=NULL
          WHERE user_id=owner.user_id;
      END LOOP;
    COMMIT;
  END;
$$

CALL main_photo_owner_check();  

-------------------------------------------------------------------------------------------------------------------------------------------------------
3. Создать триггер на обновление для таблицы профилей, который не разрешает внести в столбец main_photo_id идентификатор фотографии, если данный пользователь не является ее владельцем. Проверить работу триггера вставкой записей с корректными и некорректными значениями.

CREATE OR REPLACE FUNCTION trigger_for_update_profiles_main_photo_id()
RETURNS TRIGGER AS
$$
  DECLARE check_owner_id INTEGER;
  BEGIN
    check_owner_id := (SELECT owner_id
                         FROM photo
                         WHERE id=NEW.main_photo_id);
    IF NEW.user_id != check_owner_id THEN
      RAISE EXCEPTION 'User with ID: % has no photo from ID: %', NEW.user_id, NEW.main_photo_id;
    END IF;
    RETURN NEW;
  END;
$$
LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS check_profiles_on_update ON profiles;
CREATE TRIGGER check_profiles_on_update BEFORE UPDATE ON profiles
  FOR EACH ROW
    EXECUTE FUNCTION trigger_for_update_profiles_main_photo_id();

-- для проверки
--SELECT id
--  FROM photo
--  WHERE owner_id = 11;
    
--UPDATE profiles SET main_photo_id = 31 WHERE user_id=11;

-------------------------------------------------------------------------------------------------------------------------------------------------------
4. Создать два представления для таблицы видео. Одно представление должно быть неизменяемым, другое - изменяемым. Проверить изменяемость второго представления.

CREATE OR REPLACE VIEW mutable_video_view AS
  SELECT *
    FROM video;   

CREATE OR REPLACE VIEW immutable_video_view AS
  SELECT *
    FROM video
    GROUP BY id
    ORDER BY id;

UPDATE mutable_video_view
  SET description = 'Test mutable view'
  WHERE id = 1;

UPDATE immutable_video_view
  SET description = 'Test immutable view'
  WHERE id = 1;

